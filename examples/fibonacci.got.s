# x86-64 Intel Assembly generated by CPlus Compiler
	.intel_syntax	noprefix
	.file			"examples/fibonacci.cp"
	.section		.text

.globl			fibonacci
fibonacci:
	push	rbp
	mov		rbp, rsp
	sub		rsp, 24
	mov		dword ptr [rbp-4], edi
	mov		eax, dword ptr [rbp-4]
	cmp		eax, 1
	setle	al
	movzx	eax, al
	mov		dword ptr [rbp-8], eax
	mov		eax, dword ptr [rbp-8]
	cmp		eax, 0
	je		.Lif.end1
.Lif.then0:
	mov		eax, dword ptr [rbp-4]
	leave
	ret
.Lif.end1:
	mov		eax, dword ptr [rbp-4]
	sub		eax, 1
	mov		dword ptr [rbp-12], eax
	mov		eax, dword ptr [rbp-12]
	mov		edi, eax
	call	fibonacci
	mov		dword ptr [rbp-16], eax
	mov		eax, dword ptr [rbp-4]
	sub		eax, 2
	mov		dword ptr [rbp-20], eax
	mov		eax, dword ptr [rbp-20]
	mov		edi, eax
	call	fibonacci
	mov		dword ptr [rbp-24], eax
	mov		eax, dword ptr [rbp-16]
	add		eax, dword ptr [rbp-24]
	mov		dword ptr [rbp-28], eax
	mov		eax, dword ptr [rbp-28]
	leave
	ret

.globl			main
main:
	push	rbp
	mov		rbp, rsp
	sub		rsp, 16
	mov		dword ptr [rbp-4], 10
	mov		eax, dword ptr [rbp-4]
	mov		edi, eax
	call	fibonacci
	mov		dword ptr [rbp-8], eax
	mov		eax, dword ptr [rbp-8]
	leave
	ret


.globl			_start
_start:
	call	main
	mov		rdi, rax
	mov		rax, 60
	syscall
