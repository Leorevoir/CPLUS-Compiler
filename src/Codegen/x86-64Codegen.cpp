#include <CPlus/Codegen/x86-64Codegen.hpp>
#include <sstream>

/**
* public
*/

const std::string cplus::x86_64::Codegen::run(const std::string &ir)
{
    _ir = std::move(ir);
    _output.clear();

    _prologue();
    _generate();

    return _output;
}

/**
 * helpers
 */

static inline constexpr const std::string _get_module_name(const std::string &ir)
{
    const cplus::u64 module = ir.find("module ");

    if (module == std::string::npos) {
        return "";
    }

    const cplus::u64 start = module + 7;
    const cplus::u64 end = ir.find_first_of("\n\r\t", start);

    if (end == std::string::npos) {
        return ir.substr(start);
    }

    return ir.substr(start, end - start);
}

/**
* private
*/

void cplus::x86_64::Codegen::_emit(const std::string &s)
{
    _output += s;
    _output += '\n';
}

void cplus::x86_64::Codegen::_prologue()
{
    _emit("# x86-64 Intel Syntax Assembly generated by CPlus Compiler");
    _emit(".intel_syntax\tnoprefix");
    _emit(".file\t\t\t\"" + _get_module_name(_ir) + "\"");
    _emit(".section\t\t.text");
    _emit("");
}

void cplus::x86_64::Codegen::_generate()
{
    std::istringstream stream(_ir);
    std::string line;

    while (std::getline(stream, line)) {
        _generate_line(line);
    }
}

void cplus::x86_64::Codegen::_generate_line(const std::string &line)
{
    if (line.empty() || line.starts_with(";")) {
        return;
    }

    if (line.starts_with("func ")) {
        _emit_function_declaration(line);
    } else if (line == "{") {
        _emit_function_start();
    } else if (line == "}") {
        _emit_function_end();
    }
}

/**
* functions
*/

void cplus::x86_64::Codegen::_emit_function_declaration(const std::string &line)
{
    const std::string_view sv(line);

    if (!sv.starts_with("func @")) {
        return;
    }

    const u64 start = 6;
    const u64 end = sv.find('(', start);

    if (end == std::string::npos) {
        return;
    }

    const std::string_view func_name = sv.substr(start, end - start);

    _current_function = std::string(func_name);
    _emit(".globl\t\t\t" + _current_function);
    _emit(_current_function + ":");
}

void cplus::x86_64::Codegen::_emit_function_start()
{
    _emit("\tpushq\trbp");
    _emit("\tmovq\trsp, rbp");
}

void cplus::x86_64::Codegen::_emit_function_end()
{
    if (_stack_offset > 0) {
        _emit("\tadd\trbp, " + std::to_string(_stack_offset));
    }

    _emit("\tleave");
    _emit("\tret\n");
    _current_function.clear();
}
